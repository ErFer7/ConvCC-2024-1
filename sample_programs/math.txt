def fibonacci (int n) {
  if (n < 0) {
	return -1;
  }
  if (n == 0) {
	return 0;
  }
  int a;
  a = 0;
  int b;
  b = 1;
  int t;
  int i;
  for (i = 0; i < n; i = i + 1) {
	t = a + b;
	a = b;
	b = t;
  }
  return b;
}

def factorial (int n) {
  if (n < 0) {
	return -1;
  }
  int f;
  f = 1;
  int i;
  for (i = 0; i < n; i = i + 1) {
	f = f * (i + 1);
  }
  return f;
}

def abs (float n) {
  if (n >= 0.0) {
	return n;
  } else {
	return -n;
  }
}

def itof (int n) {
  if (n == 0) {
  return 0.0;
  }
  int pow;
  int two_to_pow;
  float two_to_pow_f;
  float result;
  result = 0.0;
  float result;
  result = 0.0;
  if (n > 0) {
	two_to_pow = 1;
	two_to_pow_f = 1.0;
	for (pow = 1; pow < 31; pow = pow + 1) {
  	if (two_to_pow == n) {
    	return two_to_pow_f;
  	}
  	if (two_to_pow > n) {
    	two_to_pow = two_to_pow / 2;
    	two_to_pow_f = two_to_pow_f / 2.0;
    	break;
  	}
  	two_to_pow = two_to_pow * 2;
  	two_to_pow_f = two_to_pow_f * 2.0;
	}
	for (pow = pow; pow > 0; pow = pow - 1) {
  	if (two_to_pow <= n) {
    	n = n - two_to_pow;
    	result = result + two_to_pow_f;
  	}
  	two_to_pow = two_to_pow / 2;
  	two_to_pow_f = two_to_pow_f / 2.0;
	}
  } else {
	two_to_pow = -1;
	two_to_pow_f = -1.0;
	for (pow = 1; pow < 31; pow = pow + 1) {
  	if (two_to_pow == n) {
    	return two_to_pow_f;
  	}
  	if (two_to_pow < n) {
    	two_to_pow = two_to_pow / 2;
    	two_to_pow_f = two_to_pow_f / 2.0;
    	break;
  	}
  	two_to_pow = two_to_pow * 2;
  	two_to_pow_f = two_to_pow_f * 2.0;
	}
	for (pow = pow; pow > 0; pow = pow - 1) {
  	if (two_to_pow >= n) {
    	n = n - two_to_pow;
    	result = result + two_to_pow_f;
  	}
  	two_to_pow = two_to_pow / 2;
  	two_to_pow_f = two_to_pow_f / 2.0;
	}
  }
}

def sqrt (float n) {
  float a;
  a = 1.0;
  float b;
  int i;
  for (i = 0; i < 100; i = i + 1) {
	b = n / a;
	a = (a + b) / 2.0;
  }
  return a;
}

def normal2 (float x, float y) {
  float length_squared;
  length_squared = x * x + y * y;
  float length;
  length = call sqrt(length_squared);
  int normal [2];
  normal[0] = x / length;
  normal[1] = y / length;
  return normal;
}

def normal3 (float x, float y, float z) {
  float length_squared;
  length_squared = x * x + y * y + z * z;
  float length;
  length = call sqrt(length_squared);
  int normal [3];
  normal[0] = x / length;
  normal[1] = y / length;
  normal[2] = z / length;
  return normal;
}

def main(int _) {
print "testing functions";

int vari1;
int vari2;
float varf1;
float varf2;
float varf3;

int fib;
vari1 = 7;
fib = call fibonacci(vari1);
print fib;

int fact;
vari1 = 6;
fact = call factorial(vari1);
print fact;

float absolute;
varf1 = -1.25;
absolute = call abs(farf1);
print absolute;

float dumb;
vari1 = 49;
dumb = call itof(vari1);
dumb = call sqrt(dumb);
print dumb;

float normal_two[2];
varf1 = 2.0;
varf2 = 2.0;
normal_two = call normal2(varf1,varf2);
print normal_two[0];
print normal_two[1];

float normal_three[3];
varf1 = 2.0;
varf2 = 4.0;
varf3 = 5.0;
normal_three = call normal3(varf1,varf2,varf3);
print normal_three[0];
print normal_three[1];
print normal_three[2];

print "complete";
print "complete";
}

